import Head from 'next/head';

import {selectableData} from "@/data/selectableConfig";
import {modelInfo} from "@/data/modelInfo";
import {useState} from "react";
import Image from "next/image";

export async function getServerSideProps (context) {

    return {
        props: {
            selectables: selectableData,
            modelInfo: modelInfo,
            sessionid: context.req.cookies.sessionid
        }
    }
}



export default function Home({selectables, modelInfo, sessionid}) {

        console.log("========")

    const [equipmentAdded, setEquipmentAdded] = useState([]);
    const [equipmentRemoved, setEquipmentRemoved] = useState([]);

    const formatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
    });

    const handleCheckBoxChange = (e, code, category) => {
        const equipmentAddedCopy = [...equipmentAdded];
        const equipmentRemovedCopy = [...equipmentRemoved];

        if (code.selected && !e.currentTarget.checked) {
            if (category.cardinality === "EXACTLY_ONE") {
                alert("You must choose at least one type of " + category.categoryName);
                return document.getElementById(code.id).checked = true;
            }
            equipmentRemovedCopy.push(code);
        }

        if (code.selected && e.currentTarget.checked) {
            if (category.cardinality === "EXACTLY_ONE") {
                const index = equipmentAddedCopy.findIndex(el => el.componentType === category.categoryName);
                if (index > -1) {
                    document.getElementById(equipmentAddedCopy[index].id).checked = false
                    equipmentAddedCopy.splice(index, 1);
                }
            }
            equipmentRemovedCopy.splice(equipmentRemovedCopy.indexOf(code), 1);
        }


        if (!code.selected && e.currentTarget.checked) {
            if (category.cardinality === "EXACTLY_ONE") {
                const index = equipmentAddedCopy.findIndex(el => el.componentType === category.categoryName);
                if (index > -1) document.getElementById(equipmentAddedCopy.splice(index, 1)[0].id).checked = false;
                if (index === -1) {
                    equipmentRemovedCopy.push(Object.entries(selectables.vehicleComponents).filter(
                        el => el[1].selected === true && category.categoryName === el[1].componentType)[0][1]);
                    document.getElementById(
                        Object.entries(selectables.vehicleComponents).filter(
                            el => el[1].selected === true && category.categoryName === el[1].componentType)[0][0]
                    ).checked = false;
                }
            }
            equipmentAddedCopy.push(code);
        }

        if (!code.selected && !e.currentTarget.checked) {
            if (category.cardinality === "EXACTLY_ONE") {
                document.getElementById(
                    Object.entries(selectables.vehicleComponents).filter(
                        el => el[1].selected === true && category.categoryName === el[1].componentType)[0][0]
                ).checked = true;
                equipmentRemovedCopy.splice(
                    equipmentRemovedCopy.indexOf(el => el.componentType === category.categoryName),
                    1);
            }
            equipmentAddedCopy.splice(equipmentAddedCopy.findIndex(el => el.id === code.id), 1);
        }

        setEquipmentAdded(equipmentAddedCopy);
        setEquipmentRemoved(equipmentRemovedCopy);
    }

    const handleProceed = async (e) => {
        e.preventDefault();
        await fetch('api/checkout', {
            method: 'POST',
            headers: {'content-type': 'application/json'},
            body: JSON.stringify({
                sessionid: sessionid,
                equipmentAdded: equipmentAdded,
                equipmentRemoved: equipmentRemoved
            })
        });
        window.location = "/checkout";
    }


    return (
        <>
            <Head>
                <title>Car Configurator</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main>
                <div>
                    <h1 style={{textAlign: "center"}}>Configuration page</h1>
                    <div style={{textAlign: "center"}}>
                        <h3
                            key={"test"}>
                            Powered by Next
                        </h3>
                    </div>


                    <Image style={{width: "90vw", display: "block", marginLeft: "auto", marginRight: "auto"}}
                         src="/mercedes.jpeg" alt="Picture of a mercedes"/>
                    <h1>{modelInfo.name}</h1>
                    {selectables.componentCategories.map((category, index) =>
                        <div key={index}>
                            <br/>
                            <h2>{category.categoryName}</h2>
                            {Object.entries(selectables.vehicleComponents).map((code, index) =>
                                <div key={index}>
                                    {(code[1].componentType === category.categoryName && !code[1].hidden && !code[1].pseudoCode)
                                        &&
                                        <div style={{borderBottom: "1px solid"}}>
                                            <br/>
                                            <b>{code[0]}</b>
                                            - {code[1].name}
                                            <div style={{float: "right"}}>
                                                <b>{formatter.format(code[1].priceInformation.price)}</b>
                                                <input
                                                    type="checkbox"
                                                    id={code[0]}
                                                    defaultChecked={(code[1].selected && !equipmentRemoved.some((el) => el.id === code[1].id))
                                                        || equipmentAdded.some((el) => el.id === code[1].id)
                                                    }
                                                    onClick={(e) => handleCheckBoxChange(e, code[1], category)}
                                                />
                                            </div>
                                        </div>
                                    }
                                </div>
                            )}
                        </div>
                    )}
                    <br/>
                    <div>{JSON.stringify(
                        sessionid
                    )}</div>
                    <br/>
                    <button style={{float: "right"}} onClick={(e) => handleProceed(e)}>Proceed to Checkout</button>
                    <br/><br/><br/><br/>
                </div>
            </main>

        </>
    )
}
